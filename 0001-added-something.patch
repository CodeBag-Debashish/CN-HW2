From be7ddebbcbddcf78d71699e07519a9a98e7fa72d Mon Sep 17 00:00:00 2001
From: CodeBag-Debashish <dekadebashish3@gmail.com>
Date: Tue, 2 Oct 2018 21:31:04 +0000
Subject: [PATCH] added something

---
 clientNode.cpp | 29 ++++++++++++++++-------------
 1 file changed, 16 insertions(+), 13 deletions(-)

diff --git a/clientNode.cpp b/clientNode.cpp
index 79e87cf..5164f3e 100644
--- a/clientNode.cpp
+++ b/clientNode.cpp
@@ -31,6 +31,7 @@ bool running = false;
 #define SUCCESS                     0
 string myIp = "10.129.135.201";/* FIXME : get my own IP address automatically */
 map<string,string> seedListMap;
+vector<string> totalListofPeers;
 set<string> listOfMyPeers;
 
 void receiveAndSend() {
@@ -118,7 +119,7 @@ int connectToASeedNode(int &connSock,string seedNodeServerIp) {
         1. Create socket : store the socketFD in the connSock arg
         2. Connect to the serverIp (it is a seedNode server)
     */
-    int connSock, in, i, ret, flags;
+    int in, i, ret, flags;
     struct sockaddr_in servaddr;
     struct sctp_status status;
     struct sctp_sndrcvinfo sndrcvinfo;
@@ -127,8 +128,7 @@ int connectToASeedNode(int &connSock,string seedNodeServerIp) {
 
     connSock = socket (AF_INET, SOCK_STREAM, IPPROTO_SCTP);
     if (connSock == -1) {
-        printf("Socket creation failed\n");
-        perror("socket()");
+        higLog("%s"," Socket creation failed");
         return FAILURE;
     }
     bzero ((void *) &servaddr, sizeof (servaddr));
@@ -136,14 +136,13 @@ int connectToASeedNode(int &connSock,string seedNodeServerIp) {
     servaddr.sin_port = htons (MY_PORT_NUM);
     servaddr.sin_addr.s_addr = inet_addr(seedNodeServerIp.c_str());
     ret = connect (connSock, (struct sockaddr *) &servaddr, sizeof (servaddr));
-    
+    /* connect may fail initially : TODO handle later */
     if (ret == -1) {
-        printf("Connection failed\n");
-        perror("connect()");
+        higLog("%s"," Connection failed");
         close(connSock);
         return FAILURE;
     }else {
-        lowLog("%s"," connection successfull to the seedNode" + serverIp);
+        lowLog("%s"," connection successfull to the seedNode" + seedNodeServerIp);
     }
     return SUCCESS;
 }
@@ -193,7 +192,7 @@ int getpeerListFromSeedNodes() {
     /* iterate through all the seed nodes provided by seedInfoServer
        try to connect to them one by one
     */
-    char bufer[MAX_BUFFER];
+    char buffer[MAX_BUFFER];
     int in = 0;
     for(auto &e:seedListMap) {
         int connSock;
@@ -209,10 +208,13 @@ int getpeerListFromSeedNodes() {
             msg.set_msg("");
             string protocolBuffer = msg.SerializeAsString();
             datalen = protocolBuffer.length();
-            sprintf(buffer, "%s", protocol_buffer.c_str());
+            sprintf(buffer, "%s", protocolBuffer.c_str());
             /* send this buffer over the sctp socket to the seedNode*/
-            ret = sendto(connSock, buffer, (size_t) datalen, 0,NULL,0);
-
+            int ret = sendto(connSock, buffer, (size_t) datalen, 0,NULL,0);
+            if(ret == -1) {
+                higLog("%s"," sendto() failed");
+                return FAILURE;
+            }
             /* expecting a reply from the seedNode */
             memset(buffer,0,sizeof(buffer));
             in = recvfrom(connSock, buffer, sizeof (buffer), 0, NULL, NULL);
@@ -226,7 +228,7 @@ int getpeerListFromSeedNodes() {
     }
     return SUCCESS;
 }
-void sendPeerList() {
+void sendPeerList(int connSock) {
     LOG_ENTRY;
     /* do not create thread */
 
@@ -272,7 +274,7 @@ int processRequest(string requestBuffer,int connSock) {
     LOG_ENTRY;
     MP::BMessage msg;
     msg.ParseFromString(requestBuffer);
-    int type = msg.typeOfMessage();
+    int type = msg.typeofmessage();
     if(type == MSG_TYPE_GIVE_ME_PEER_LIST) {
         sendPeerList(connSock);
         close(connSock);
@@ -333,6 +335,7 @@ void executeOwnWork() {
         3. Generate BITCOIN transaction Message at an interval of 5 sec.
         4. send these message to the peerAddr
     */
+
     for(int peer = 1;peer <= 4;peer++) {
         /* will it better to create just one thread : and that will broadcast the
          messages to all 4 peers
-- 
2.17.1

